{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\Desktop\\\\code\\\\Projects\\\\snake-multiplayer\\\\snake-multiplayer-client\\\\src\\\\pages\\\\InGame\\\\index.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport UIfx from 'uifx';\nimport GameOver from './assets/gameOver.mp3';\nimport Point from './assets/point.wav';\nimport Hit from './assets/hit.wav';\nimport Modal from 'react-modal';\nimport { useInterval } from './useInterval.js';\nimport { compass } from './constants.js';\nimport './InGame.css';\nimport api from '../../services/api';\n\nconst InGame = () => {\n  const data = useLocation().state;\n  const map = data.map;\n  const myColor = data.myColor;\n  const gameOverSound = new UIfx(GameOver);\n  const pointSound = new UIfx(Point);\n  const hitSound = new UIfx(Hit);\n  const canvasRef = useRef();\n  const [modalOpen, setModalOpen] = useState(true);\n  const [gameOverModal, setGameOverModal] = useState(false);\n  const [snakes, setSnakes] = useState();\n  const [snake, setSnake] = useState(data.myPosition);\n  const [apple, setApple] = useState([-1, -1]);\n  const [momentum, setMomentum] = useState(compass[Object.keys(compass)[8 * Math.random() << 0]]);\n  const [syncMomentum, setSyncMomentum] = useState(momentum);\n  const [snakeSpeed, setSnakeSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [searching, setSearching] = useState(false);\n  const [running, setRunning] = useState(false);\n  useEffect(() => {\n    api.get('apple').then(response => setApple(response.data));\n  });\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(map.scale, 0, 0, map.scale, 0, 0);\n  });\n\n  const startGame = () => {\n    setGameOver(false);\n    setSearching(null);\n    setSnakeSpeed(100);\n  };\n\n  const move = keyCode => {\n    if (keyCode in compass) {\n      const newMomentum = compass[keyCode];\n      if (newMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] && newMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]) setMomentum(newMomentum);\n    } else if (keyCode === 13 || keyCode === 32) startGame();\n  };\n\n  const endGame = () => {\n    setGameOverModal(true);\n    hitSound.play();\n    gameOverSound.play();\n    setSearching(1000);\n    setSnakeSpeed(null);\n    setGameOver(true);\n  };\n\n  const wrapAdjust = (value, index) => {\n    if (value >= map.size[index] / map.scale) return 0;else if (value < 0) return map.size[index] / map.scale - 1;else return value;\n  };\n\n  const spawnApple = () => apple.map((_, i) => Math.floor(Math.random() * map.size[i] / map.scale));\n\n  const checkCollision = (head, snek = snake) => {\n    for (const segment of snek) {\n      if (head[0] === segment[0] && head[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = snek => {\n    if (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n      pointSound.play();\n      let newApple = spawnApple();\n\n      while (checkCollision(newApple, snek)) spawnApple();\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameOn = () => {\n    setSyncMomentum(momentum);\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [wrapAdjust(snakeCopy[0][0] + syncMomentum[0], 0), wrapAdjust(snakeCopy[0][1] + syncMomentum[1], 1)];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, map.size[0], map.size[1]);\n    context.fillStyle = '#ff353a';\n    context.fillRect(apple[0], apple[1], 1, 1);\n    console.log('snakes is ', snakes);\n\n    for (const each of snakes) {\n      context.fillStyle = each.color;\n      each.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    }\n  }, [snake, apple, gameOver, map, myColor, snakes]);\n  useInterval(() => {\n    api.get('snakes').then(response => {\n      console.log(response.data);\n      setSnakes(response.data);\n    });\n  });\n  useInterval(() => {\n    if (searching) {\n      api.get('running').then(response => setRunning(response.data));\n      if (running === true) startGame();\n    }\n  }, searching);\n  useInterval(() => gameOn(), snakeSpeed);\n  const element = document.getElementById('root');\n\n  function openFullscreen() {\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n      element.webkitRequestFullscreen();\n    } else if (element.msRequestFullscreen) {\n      element.msRequestFullscreen();\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"keyCap\",\n    role: \"button\",\n    tabIndex: \"-1\",\n    onKeyDown: event => move(event.keyCode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    className: \"gameOverModal\",\n    overlayClassName: \"modalOverlay\",\n    isOpen: gameOverModal,\n    onRequestClose: () => setGameOverModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"mainTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, \"Game Over!\")), /*#__PURE__*/React.createElement(Modal, {\n    className: \"modal\",\n    overlayClassName: \"modalOverlay\",\n    isOpen: modalOpen,\n    onRequestClose: () => setModalOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, \"Would you like to enable fullscreen?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, \"(Recommended)\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setModalOpen(false);\n      openFullscreen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, \"Ok\")), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"mainTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 4\n    }\n  }, \"Classic Snake\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    className: \"map\",\n    ref: canvasRef,\n    width: `${map.size[0]}px`,\n    height: `${map.size[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default InGame;","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/Projects/snake-multiplayer/snake-multiplayer-client/src/pages/InGame/index.js"],"names":["React","useState","useRef","useEffect","useLocation","UIfx","GameOver","Point","Hit","Modal","useInterval","compass","api","InGame","data","state","map","myColor","gameOverSound","pointSound","hitSound","canvasRef","modalOpen","setModalOpen","gameOverModal","setGameOverModal","snakes","setSnakes","snake","setSnake","myPosition","apple","setApple","momentum","setMomentum","Object","keys","Math","random","syncMomentum","setSyncMomentum","snakeSpeed","setSnakeSpeed","gameOver","setGameOver","searching","setSearching","running","setRunning","get","then","response","context","current","getContext","setTransform","scale","startGame","move","keyCode","newMomentum","abs","endGame","play","wrapAdjust","value","index","size","spawnApple","_","i","floor","checkCollision","head","snek","segment","checkAppleCollision","newApple","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","clearRect","fillStyle","fillRect","console","log","each","color","forEach","x","y","element","document","getElementById","openFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","event"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAO,cAAP;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACpB,QAAMC,IAAI,GAAGV,WAAW,GAAGW,KAA3B;AAEA,QAAMC,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,QAAMC,OAAO,GAAGH,IAAI,CAACG,OAArB;AACA,QAAMC,aAAa,GAAG,IAAIb,IAAJ,CAASC,QAAT,CAAtB;AACA,QAAMa,UAAU,GAAG,IAAId,IAAJ,CAASE,KAAT,CAAnB;AACA,QAAMa,QAAQ,GAAG,IAAIf,IAAJ,CAASG,GAAT,CAAjB;AACA,QAAMa,SAAS,GAAGnB,MAAM,EAAxB;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,EAApC;AACA,QAAM,CAAC2B,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAACa,IAAI,CAACgB,UAAN,CAAlC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAD,CAAlC;AACA,QAAM,CAACgC,QAAD,EAAWC,WAAX,IAA0BjC,QAAQ,CACvCU,OAAO,CAACwB,MAAM,CAACC,IAAP,CAAYzB,OAAZ,EAAsB,IAAI0B,IAAI,CAACC,MAAL,EAAL,IAAuB,CAA5C,CAAD,CADgC,CAAxC;AAGA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCvC,QAAQ,CAACgC,QAAD,CAAhD;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BzC,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAAC0C,QAAD,EAAWC,WAAX,IAA0B3C,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAC4C,SAAD,EAAYC,YAAZ,IAA4B7C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC8C,OAAD,EAAUC,UAAV,IAAwB/C,QAAQ,CAAC,KAAD,CAAtC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,GAAG,CAACqC,GAAJ,CAAQ,OAAR,EAAiBC,IAAjB,CAAuBC,QAAD,IAAcnB,QAAQ,CAACmB,QAAQ,CAACrC,IAAV,CAA5C;AACA,GAFQ,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMiD,OAAO,GAAG/B,SAAS,CAACgC,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAF,IAAAA,OAAO,CAACG,YAAR,CAAqBvC,GAAG,CAACwC,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsCxC,GAAG,CAACwC,KAA1C,EAAiD,CAAjD,EAAoD,CAApD;AACA,GAHQ,CAAT;;AAKA,QAAMC,SAAS,GAAG,MAAM;AACvBb,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,aAAa,CAAC,GAAD,CAAb;AACA,GAJD;;AAMA,QAAMgB,IAAI,GAAIC,OAAD,IAAa;AACzB,QAAIA,OAAO,IAAIhD,OAAf,EAAwB;AACvB,YAAMiD,WAAW,GAAGjD,OAAO,CAACgD,OAAD,CAA3B;AACA,UACCC,WAAW,CAAC5C,GAAZ,CAAgBqB,IAAI,CAACwB,GAArB,EAA0B,CAA1B,MAAiC5B,QAAQ,CAACjB,GAAT,CAAaqB,IAAI,CAACwB,GAAlB,EAAuB,CAAvB,CAAjC,IACAD,WAAW,CAAC5C,GAAZ,CAAgBqB,IAAI,CAACwB,GAArB,EAA0B,CAA1B,MAAiC5B,QAAQ,CAACjB,GAAT,CAAaqB,IAAI,CAACwB,GAAlB,EAAuB,CAAvB,CAFlC,EAIC3B,WAAW,CAAC0B,WAAD,CAAX;AACD,KAPD,MAOO,IAAID,OAAO,KAAK,EAAZ,IAAkBA,OAAO,KAAK,EAAlC,EAAsCF,SAAS;AACtD,GATD;;AAWA,QAAMK,OAAO,GAAG,MAAM;AACrBrC,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAL,IAAAA,QAAQ,CAAC2C,IAAT;AACA7C,IAAAA,aAAa,CAAC6C,IAAd;AACAjB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,GAPD;;AASA,QAAMoB,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpC,QAAID,KAAK,IAAIjD,GAAG,CAACmD,IAAJ,CAASD,KAAT,IAAkBlD,GAAG,CAACwC,KAAnC,EAA0C,OAAO,CAAP,CAA1C,KACK,IAAIS,KAAK,GAAG,CAAZ,EAAe,OAAOjD,GAAG,CAACmD,IAAJ,CAASD,KAAT,IAAkBlD,GAAG,CAACwC,KAAtB,GAA8B,CAArC,CAAf,KACA,OAAOS,KAAP;AACL,GAJD;;AAMA,QAAMG,UAAU,GAAG,MAClBrC,KAAK,CAACf,GAAN,CAAU,CAACqD,CAAD,EAAIC,CAAJ,KAAUjC,IAAI,CAACkC,KAAL,CAAYlC,IAAI,CAACC,MAAL,KAAgBtB,GAAG,CAACmD,IAAJ,CAASG,CAAT,CAAjB,GAAgCtD,GAAG,CAACwC,KAA/C,CAApB,CADD;;AAGA,QAAMgB,cAAc,GAAG,CAACC,IAAD,EAAOC,IAAI,GAAG9C,KAAd,KAAwB;AAC9C,SAAK,MAAM+C,OAAX,IAAsBD,IAAtB,EAA4B;AAC3B,UAAID,IAAI,CAAC,CAAD,CAAJ,KAAYE,OAAO,CAAC,CAAD,CAAnB,IAA0BF,IAAI,CAAC,CAAD,CAAJ,KAAYE,OAAO,CAAC,CAAD,CAAjD,EAAsD,OAAO,IAAP;AACtD;;AACD,WAAO,KAAP;AACA,GALD;;AAOA,QAAMC,mBAAmB,GAAIF,IAAD,IAAU;AACrC,QAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,MAAe3C,KAAK,CAAC,CAAD,CAApB,IAA2B2C,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,MAAe3C,KAAK,CAAC,CAAD,CAAnD,EAAwD;AACvDZ,MAAAA,UAAU,CAAC4C,IAAX;AACA,UAAIc,QAAQ,GAAGT,UAAU,EAAzB;;AACA,aAAOI,cAAc,CAACK,QAAD,EAAWH,IAAX,CAArB,EAAuCN,UAAU;;AACjDpC,MAAAA,QAAQ,CAAC6C,QAAD,CAAR;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA,GATD;;AAWA,QAAMC,MAAM,GAAG,MAAM;AACpBtC,IAAAA,eAAe,CAACP,QAAD,CAAf;AACA,UAAM8C,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetD,KAAf,CAAX,CAAlB;AACA,UAAMuD,YAAY,GAAG,CACpBnB,UAAU,CAACe,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBxC,YAAY,CAAC,CAAD,CAA/B,EAAoC,CAApC,CADU,EAEpByB,UAAU,CAACe,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBxC,YAAY,CAAC,CAAD,CAA/B,EAAoC,CAApC,CAFU,CAArB;AAIAwC,IAAAA,SAAS,CAACK,OAAV,CAAkBD,YAAlB;AACA,QAAIX,cAAc,CAACW,YAAD,CAAlB,EAAkCrB,OAAO;AACzC,QAAI,CAACc,mBAAmB,CAACG,SAAD,CAAxB,EAAqCA,SAAS,CAACM,GAAV;AACrCxD,IAAAA,QAAQ,CAACkD,SAAD,CAAR;AACA,GAXD;;AAaA5E,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMiD,OAAO,GAAG/B,SAAS,CAACgC,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAF,IAAAA,OAAO,CAACkC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBtE,GAAG,CAACmD,IAAJ,CAAS,CAAT,CAAxB,EAAqCnD,GAAG,CAACmD,IAAJ,CAAS,CAAT,CAArC;AACAf,IAAAA,OAAO,CAACmC,SAAR,GAAoB,SAApB;AACAnC,IAAAA,OAAO,CAACoC,QAAR,CAAiBzD,KAAK,CAAC,CAAD,CAAtB,EAA2BA,KAAK,CAAC,CAAD,CAAhC,EAAqC,CAArC,EAAwC,CAAxC;AACA0D,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BhE,MAA1B;;AACA,SAAK,MAAMiE,IAAX,IAAmBjE,MAAnB,EAA2B;AAC1B0B,MAAAA,OAAO,CAACmC,SAAR,GAAoBI,IAAI,CAACC,KAAzB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAa,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY3C,OAAO,CAACoC,QAAR,CAAiBM,CAAjB,EAAoBC,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAzB;AACA;AAED,GAXQ,EAWN,CAACnE,KAAD,EAAQG,KAAR,EAAeY,QAAf,EAAyB3B,GAAzB,EAA8BC,OAA9B,EAAuCS,MAAvC,CAXM,CAAT;AAaAhB,EAAAA,WAAW,CAAC,MAAM;AACjBE,IAAAA,GAAG,CAACqC,GAAJ,CAAQ,QAAR,EAAkBC,IAAlB,CAAwBC,QAAD,IAAc;AACpCsC,MAAAA,OAAO,CAACC,GAAR,CAAYvC,QAAQ,CAACrC,IAArB;AACAa,MAAAA,SAAS,CAACwB,QAAQ,CAACrC,IAAV,CAAT;AAAyB,KAF1B;AAGA,GAJU,CAAX;AAMAJ,EAAAA,WAAW,CAAC,MAAM;AACjB,QAAImC,SAAJ,EAAe;AACdjC,MAAAA,GAAG,CAACqC,GAAJ,CAAQ,SAAR,EAAmBC,IAAnB,CAAyBC,QAAD,IAAcH,UAAU,CAACG,QAAQ,CAACrC,IAAV,CAAhD;AACA,UAAIiC,OAAO,KAAK,IAAhB,EAAsBU,SAAS;AAC/B;AACD,GALU,EAKRZ,SALQ,CAAX;AAOAnC,EAAAA,WAAW,CAAC,MAAMoE,MAAM,EAAb,EAAiBrC,UAAjB,CAAX;AAEA,QAAMuD,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhB;;AAEA,WAASC,cAAT,GAA0B;AACzB,QAAIH,OAAO,CAACI,iBAAZ,EAA+B;AAC9BJ,MAAAA,OAAO,CAACI,iBAAR;AACA,KAFD,MAEO,IAAIJ,OAAO,CAACK,oBAAZ,EAAkC;AACxCL,MAAAA,OAAO,CAACK,oBAAR;AACA,KAFM,MAEA,IAAIL,OAAO,CAACM,uBAAZ,EAAqC;AAC3CN,MAAAA,OAAO,CAACM,uBAAR;AACA,KAFM,MAEA,IAAIN,OAAO,CAACO,mBAAZ,EAAiC;AACvCP,MAAAA,OAAO,CAACO,mBAAR;AACA;AACD;;AAED,sBACC;AACC,IAAA,SAAS,EAAC,QADX;AAEC,IAAA,IAAI,EAAC,QAFN;AAGC,IAAA,QAAQ,EAAC,IAHV;AAIC,IAAA,SAAS,EAAGC,KAAD,IAAW9C,IAAI,CAAC8C,KAAK,CAAC7C,OAAP,CAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMC,oBAAC,KAAD;AACC,IAAA,SAAS,EAAC,eADX;AAEC,IAAA,gBAAgB,EAAC,cAFlB;AAGC,IAAA,MAAM,EAAEnC,aAHT;AAIC,IAAA,cAAc,EAAE,MAAMC,gBAAgB,CAAC,KAAD,CAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMC;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAND,CAND,eAcC,oBAAC,KAAD;AACC,IAAA,SAAS,EAAC,OADX;AAEC,IAAA,gBAAgB,EAAC,cAFlB;AAGC,IAAA,MAAM,EAAEH,SAHT;AAIC,IAAA,cAAc,EAAE,MAAMC,YAAY,CAAC,KAAD,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAND,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPD,eAQC;AACC,IAAA,OAAO,EAAE,MAAM;AACdA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA4E,MAAAA,cAAc;AACd,KAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARD,CAdD,eA+BC;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA/BD,eAgCC;AACC,IAAA,SAAS,EAAC,KADX;AAEC,IAAA,GAAG,EAAE9E,SAFN;AAGC,IAAA,KAAK,EAAG,GAAEL,GAAG,CAACmD,IAAJ,CAAS,CAAT,CAAY,IAHvB;AAIC,IAAA,MAAM,EAAG,GAAEnD,GAAG,CAACmD,IAAJ,CAAS,CAAT,CAAY,IAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCD,CADD;AAyCA,CArLD;;AAuLA,eAAetD,MAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport UIfx from 'uifx';\nimport GameOver from './assets/gameOver.mp3';\nimport Point from './assets/point.wav';\nimport Hit from './assets/hit.wav';\nimport Modal from 'react-modal';\nimport { useInterval } from './useInterval.js';\nimport { compass } from './constants.js';\nimport './InGame.css';\n\nimport api from '../../services/api';\n\nconst InGame = () => {\n\tconst data = useLocation().state;\n\n\tconst map = data.map;\n\tconst myColor = data.myColor;\n\tconst gameOverSound = new UIfx(GameOver);\n\tconst pointSound = new UIfx(Point);\n\tconst hitSound = new UIfx(Hit);\n\tconst canvasRef = useRef();\n\tconst [modalOpen, setModalOpen] = useState(true);\n\tconst [gameOverModal, setGameOverModal] = useState(false);\n\tconst [snakes, setSnakes] = useState();\n\tconst [snake, setSnake] = useState(data.myPosition);\n\tconst [apple, setApple] = useState([-1, -1]);\n\tconst [momentum, setMomentum] = useState(\n\t\tcompass[Object.keys(compass)[(8 * Math.random()) << 0]]\n\t);\n\tconst [syncMomentum, setSyncMomentum] = useState(momentum);\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\tconst [searching, setSearching] = useState(false);\n\tconst [running, setRunning] = useState(false);\n\n\tuseEffect(() => {\n\t\tapi.get('apple').then((response) => setApple(response.data));\n\t});\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.setTransform(map.scale, 0, 0, map.scale, 0, 0);\n\t});\n\n\tconst startGame = () => {\n\t\tsetGameOver(false);\n\t\tsetSearching(null);\n\t\tsetSnakeSpeed(100);\n\t};\n\n\tconst move = (keyCode) => {\n\t\tif (keyCode in compass) {\n\t\t\tconst newMomentum = compass[keyCode];\n\t\t\tif (\n\t\t\t\tnewMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] &&\n\t\t\t\tnewMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]\n\t\t\t)\n\t\t\t\tsetMomentum(newMomentum);\n\t\t} else if (keyCode === 13 || keyCode === 32) startGame();\n\t};\n\n\tconst endGame = () => {\n\t\tsetGameOverModal(true);\n\t\thitSound.play();\n\t\tgameOverSound.play();\n\t\tsetSearching(1000);\n\t\tsetSnakeSpeed(null);\n\t\tsetGameOver(true);\n\t};\n\n\tconst wrapAdjust = (value, index) => {\n\t\tif (value >= map.size[index] / map.scale) return 0;\n\t\telse if (value < 0) return map.size[index] / map.scale - 1;\n\t\telse return value;\n\t};\n\n\tconst spawnApple = () =>\n\t\tapple.map((_, i) => Math.floor((Math.random() * map.size[i]) / map.scale));\n\n\tconst checkCollision = (head, snek = snake) => {\n\t\tfor (const segment of snek) {\n\t\t\tif (head[0] === segment[0] && head[1] === segment[1]) return true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst checkAppleCollision = (snek) => {\n\t\tif (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n\t\t\tpointSound.play();\n\t\t\tlet newApple = spawnApple();\n\t\t\twhile (checkCollision(newApple, snek)) spawnApple();\n\t\t\tsetApple(newApple);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst gameOn = () => {\n\t\tsetSyncMomentum(momentum);\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\n\t\tconst newSnakeHead = [\n\t\t\twrapAdjust(snakeCopy[0][0] + syncMomentum[0], 0),\n\t\t\twrapAdjust(snakeCopy[0][1] + syncMomentum[1], 1),\n\t\t];\n\t\tsnakeCopy.unshift(newSnakeHead);\n\t\tif (checkCollision(newSnakeHead)) endGame();\n\t\tif (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n\t\tsetSnake(snakeCopy);\n\t};\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.clearRect(0, 0, map.size[0], map.size[1]);\n\t\tcontext.fillStyle = '#ff353a';\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\n\t\tconsole.log('snakes is ', snakes);\n\t\tfor (const each of snakes) {\n\t\t\tcontext.fillStyle = each.color;\n\t\t\teach.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\t\t}\n\t\t\n\t}, [snake, apple, gameOver, map, myColor, snakes]);\n\n\tuseInterval(() => {\n\t\tapi.get('snakes').then((response) => {\n\t\t\tconsole.log(response.data);\n\t\t\tsetSnakes(response.data)});\n\t});\n\n\tuseInterval(() => {\n\t\tif (searching) {\n\t\t\tapi.get('running').then((response) => setRunning(response.data));\n\t\t\tif (running === true) startGame();\n\t\t}\n\t}, searching);\n\n\tuseInterval(() => gameOn(), snakeSpeed);\n\n\tconst element = document.getElementById('root');\n\n\tfunction openFullscreen() {\n\t\tif (element.requestFullscreen) {\n\t\t\telement.requestFullscreen();\n\t\t} else if (element.mozRequestFullScreen) {\n\t\t\telement.mozRequestFullScreen();\n\t\t} else if (element.webkitRequestFullscreen) {\n\t\t\telement.webkitRequestFullscreen();\n\t\t} else if (element.msRequestFullscreen) {\n\t\t\telement.msRequestFullscreen();\n\t\t}\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"keyCap\"\n\t\t\trole=\"button\"\n\t\t\ttabIndex=\"-1\"\n\t\t\tonKeyDown={(event) => move(event.keyCode)}\n\t\t>\n\t\t\t<Modal\n\t\t\t\tclassName=\"gameOverModal\"\n\t\t\t\toverlayClassName=\"modalOverlay\"\n\t\t\t\tisOpen={gameOverModal}\n\t\t\t\tonRequestClose={() => setGameOverModal(false)}\n\t\t\t>\n\t\t\t\t<h1 className=\"mainTitle\">Game Over!</h1>\n\t\t\t</Modal>\n\t\t\t<Modal\n\t\t\t\tclassName=\"modal\"\n\t\t\t\toverlayClassName=\"modalOverlay\"\n\t\t\t\tisOpen={modalOpen}\n\t\t\t\tonRequestClose={() => setModalOpen(false)}\n\t\t\t>\n\t\t\t\t<h2>Would you like to enable fullscreen?</h2>\n\t\t\t\t<p>(Recommended)</p>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetModalOpen(false);\n\t\t\t\t\t\topenFullscreen();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tOk\n\t\t\t\t</button>\n\t\t\t</Modal>\n\t\t\t<h1 className=\"mainTitle\">Classic Snake</h1>\n\t\t\t<canvas\n\t\t\t\tclassName=\"map\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${map.size[0]}px`}\n\t\t\t\theight={`${map.size[1]}px`}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default InGame;\n"]},"metadata":{},"sourceType":"module"}
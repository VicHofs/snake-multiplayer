{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\Desktop\\\\code\\\\React\\\\snake\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass } from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(snakeSpawnPos);\n  const [apple, setApple] = useState(appleSpawnPos);\n  const [momentum, setMomentum] = useState([0, -1]);\n  const [snakeSpeed, setSnakeSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n  });\n\n  const startGame = () => {\n    setSnake(snakeSpawnPos);\n    setApple(appleSpawnPos);\n    setMomentum([0, -1]);\n    setSnakeSpeed(speed);\n    setGameOver(false);\n  };\n\n  const move = keyCode => {\n    const newMomentum = compass[keyCode];\n    if (newMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] && newMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]) setMomentum(newMomentum);\n  };\n\n  const endGame = () => {\n    setSnakeSpeed(null);\n    setGameOver(true);\n    alert('GAME OVER!');\n  };\n\n  const wrapAdjust = (value, index) => {\n    if (value >= mapSize[index] / mapScale) return 0;else if (value < 0) return mapSize[index] / mapScale - 1;else return value;\n  };\n\n  const spawnApple = () => apple.map((_, i) => Math.floor(Math.random() * mapSize[i] / mapScale));\n\n  const checkCollision = (head, snek = snake) => {\n    for (const segment of snek) {\n      if (head[0] === segment[0] && head[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = snek => {\n    if (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n      let newApple = spawnApple();\n\n      while (checkCollision(newApple, snek)) spawnApple();\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameOn = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [wrapAdjust(snakeCopy[0][0] + momentum[0], 0), wrapAdjust(snakeCopy[0][1] + momentum[1], 1)];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n    console.log('head position is', newSnakeHead);\n    console.log('momentum is', momentum);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, mapSize[0], mapSize[1]);\n    context.fillStyle = '#ff353a';\n    context.fillRect(apple[0], apple[1], 1, 1);\n    context.fillStyle = '#00ff40';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameOn(), snakeSpeed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"-1\",\n    onKeyDown: event => move(event.keyCode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${mapSize[0]}px`,\n    height: `${mapSize[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"startButton\",\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 56\n    }\n  }, \"Start Game \")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/React/snake/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","mapSize","snakeSpawnPos","appleSpawnPos","mapScale","speed","compass","App","canvasRef","snake","setSnake","apple","setApple","momentum","setMomentum","snakeSpeed","setSnakeSpeed","gameOver","setGameOver","context","current","getContext","setTransform","startGame","move","keyCode","newMomentum","map","Math","abs","endGame","alert","wrapAdjust","value","index","spawnApple","_","i","floor","random","checkCollision","head","snek","segment","checkAppleCollision","newApple","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","console","log","clearRect","fillStyle","fillRect","forEach","x","y","event","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SACCC,OADD,EAECC,aAFD,EAGCC,aAHD,EAICC,QAJD,EAKCC,KALD,EAMCC,OAND,QAOO,kBAPP;AAQA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AACjB,QAAMC,SAAS,GAAGV,MAAM,EAAxB;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACK,aAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACM,aAAD,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,CAAxC;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,KAAD,CAAxC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMoB,OAAO,GAAGX,SAAS,CAACY,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAF,IAAAA,OAAO,CAACG,YAAR,CAAqBlB,QAArB,EAA+B,CAA/B,EAAkC,CAAlC,EAAqCA,QAArC,EAA+C,CAA/C,EAAkD,CAAlD;AACA,GAHQ,CAAT;;AAKA,QAAMmB,SAAS,GAAG,MAAM;AACvBb,IAAAA,QAAQ,CAACR,aAAD,CAAR;AACAU,IAAAA,QAAQ,CAACT,aAAD,CAAR;AACAW,IAAAA,WAAW,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,CAAX;AACAE,IAAAA,aAAa,CAACX,KAAD,CAAb;AACAa,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,GAND;;AAQA,QAAMM,IAAI,GAAIC,OAAD,IAAa;AACzB,UAAMC,WAAW,GAAGpB,OAAO,CAACmB,OAAD,CAA3B;AACE,QAAIC,WAAW,CAACC,GAAZ,CAAgBC,IAAI,CAACC,GAArB,EAA0B,CAA1B,MAAiChB,QAAQ,CAACc,GAAT,CAAaC,IAAI,CAACC,GAAlB,EAAuB,CAAvB,CAAjC,IAA8DH,WAAW,CAACC,GAAZ,CAAgBC,IAAI,CAACC,GAArB,EAA0B,CAA1B,MAAiChB,QAAQ,CAACc,GAAT,CAAaC,IAAI,CAACC,GAAlB,EAAuB,CAAvB,CAAnG,EAA8Hf,WAAW,CAACY,WAAD,CAAX;AAChI,GAHD;;AAKA,QAAMI,OAAO,GAAG,MAAM;AACrBd,IAAAA,aAAa,CAAC,IAAD,CAAb;AACEE,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAa,IAAAA,KAAK,CAAC,YAAD,CAAL;AACF,GAJD;;AAMA,QAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpC,QAAID,KAAK,IAAIhC,OAAO,CAACiC,KAAD,CAAP,GAAiB9B,QAA9B,EAAwC,OAAO,CAAP,CAAxC,KACK,IAAI6B,KAAK,GAAG,CAAZ,EAAe,OAAQhC,OAAO,CAACiC,KAAD,CAAP,GAAiB9B,QAAlB,GAA4B,CAAnC,CAAf,KACA,OAAO6B,KAAP;AACL,GAJD;;AAMA,QAAME,UAAU,GAAG,MAClBxB,KAAK,CAACgB,GAAN,CAAU,CAACS,CAAD,EAAIC,CAAJ,KAAUT,IAAI,CAACU,KAAL,CAAYV,IAAI,CAACW,MAAL,KAAgBtC,OAAO,CAACoC,CAAD,CAAxB,GAA+BjC,QAA1C,CAApB,CADD;;AAGA,QAAMoC,cAAc,GAAG,CAACC,IAAD,EAAOC,IAAI,GAAGjC,KAAd,KAAwB;AAC9C,SAAK,MAAMkC,OAAX,IAAsBD,IAAtB,EAA4B;AAC3B,UAAID,IAAI,CAAC,CAAD,CAAJ,KAAYE,OAAO,CAAC,CAAD,CAAnB,IAA0BF,IAAI,CAAC,CAAD,CAAJ,KAAYE,OAAO,CAAC,CAAD,CAAjD,EAAsD,OAAO,IAAP;AACtD;;AACD,WAAO,KAAP;AACA,GALD;;AAOA,QAAMC,mBAAmB,GAAIF,IAAD,IAAU;AACrC,QAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,MAAe/B,KAAK,CAAC,CAAD,CAApB,IAA2B+B,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,MAAe/B,KAAK,CAAC,CAAD,CAAnD,EAAwD;AACvD,UAAIkC,QAAQ,GAAGV,UAAU,EAAzB;;AACA,aAAOK,cAAc,CAACK,QAAD,EAAWH,IAAX,CAArB,EAAuCP,UAAU;;AACjDvB,MAAAA,QAAQ,CAACiC,QAAD,CAAR;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA,GARD;;AAUA,QAAMC,MAAM,GAAG,MAAM;AACpB,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezC,KAAf,CAAX,CAAlB;AACA,UAAM0C,YAAY,GAAG,CACpBnB,UAAU,CAACe,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBlC,QAAQ,CAAC,CAAD,CAA3B,EAAgC,CAAhC,CADU,EAEpBmB,UAAU,CAACe,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBlC,QAAQ,CAAC,CAAD,CAA3B,EAAgC,CAAhC,CAFU,CAArB;AAIAkC,IAAAA,SAAS,CAACK,OAAV,CAAkBD,YAAlB;AACA,QAAIX,cAAc,CAACW,YAAD,CAAlB,EAAkCrB,OAAO;AACzC,QAAI,CAACc,mBAAmB,CAACG,SAAD,CAAxB,EAAqCA,SAAS,CAACM,GAAV;AACnC3C,IAAAA,QAAQ,CAACqC,SAAD,CAAR;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,YAAhC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B1C,QAA3B;AACF,GAZD;;AAcAd,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMoB,OAAO,GAAGX,SAAS,CAACY,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAF,IAAAA,OAAO,CAACqC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBvD,OAAO,CAAC,CAAD,CAA/B,EAAoCA,OAAO,CAAC,CAAD,CAA3C;AACAkB,IAAAA,OAAO,CAACsC,SAAR,GAAoB,SAApB;AACAtC,IAAAA,OAAO,CAACuC,QAAR,CAAiB/C,KAAK,CAAC,CAAD,CAAtB,EAA2BA,KAAK,CAAC,CAAD,CAAhC,EAAqC,CAArC,EAAwC,CAAxC;AACAQ,IAAAA,OAAO,CAACsC,SAAR,GAAoB,SAApB;AACAhD,IAAAA,KAAK,CAACkD,OAAN,CAAc,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY1C,OAAO,CAACuC,QAAR,CAAiBE,CAAjB,EAAoBC,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAA1B;AACA,GAPQ,EAON,CAACpD,KAAD,EAAQE,KAAR,EAAeM,QAAf,CAPM,CAAT;AASAjB,EAAAA,WAAW,CAAC,MAAM8C,MAAM,EAAb,EAAiB/B,UAAjB,CAAX;AAEA,sBACC;AAAK,IAAA,IAAI,EAAC,QAAV;AAAmB,IAAA,QAAQ,EAAC,IAA5B;AAAiC,IAAA,SAAS,EAAG+C,KAAD,IAAWtC,IAAI,CAACsC,KAAK,CAACrC,OAAP,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AACC,IAAA,KAAK,EAAE;AAAEsC,MAAAA,MAAM,EAAE;AAAV,KADR;AAEC,IAAA,GAAG,EAAEvD,SAFN;AAGC,IAAA,KAAK,EAAG,GAAEP,OAAO,CAAC,CAAD,CAAI,IAHtB;AAIC,IAAA,MAAM,EAAG,GAAEA,OAAO,CAAC,CAAD,CAAI,IAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAOEgB,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPd,eAQC;AAAQ,IAAA,SAAS,EAAC,aAAlB;AAAgC,IAAA,OAAO,EAAEM,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApD,CARD,CADD;AAYA,CA/FD;;AAiGA,eAAehB,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport {\n\tmapSize,\n\tsnakeSpawnPos,\n\tappleSpawnPos,\n\tmapScale,\n\tspeed,\n\tcompass,\n} from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n\tconst canvasRef = useRef();\n\tconst [snake, setSnake] = useState(snakeSpawnPos);\n\tconst [apple, setApple] = useState(appleSpawnPos);\n\tconst [momentum, setMomentum] = useState([0, -1]);\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n\t});\n\n\tconst startGame = () => {\n\t\tsetSnake(snakeSpawnPos);\n\t\tsetApple(appleSpawnPos);\n\t\tsetMomentum([0, -1]);\n\t\tsetSnakeSpeed(speed);\n\t\tsetGameOver(false);\n\t};\n\n\tconst move = (keyCode) => {\n\t\tconst newMomentum = compass[keyCode];\n    if (newMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] && newMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]) setMomentum(newMomentum);\n\t};\n\n\tconst endGame = () => {\n\t\tsetSnakeSpeed(null);\n    setGameOver(true);\n    alert('GAME OVER!')\n\t};\n\n\tconst wrapAdjust = (value, index) => {\n\t\tif (value >= mapSize[index] / mapScale) return 0;\n\t\telse if (value < 0) return (mapSize[index] / mapScale)-1;\n\t\telse return value;\n\t};\n\n\tconst spawnApple = () =>\n\t\tapple.map((_, i) => Math.floor((Math.random() * mapSize[i]) / mapScale));\n\n\tconst checkCollision = (head, snek = snake) => {\n\t\tfor (const segment of snek) {\n\t\t\tif (head[0] === segment[0] && head[1] === segment[1]) return true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst checkAppleCollision = (snek) => {\n\t\tif (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n\t\t\tlet newApple = spawnApple();\n\t\t\twhile (checkCollision(newApple, snek)) spawnApple();\n\t\t\tsetApple(newApple);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst gameOn = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\n\t\tconst newSnakeHead = [\n\t\t\twrapAdjust(snakeCopy[0][0] + momentum[0], 0),\n\t\t\twrapAdjust(snakeCopy[0][1] + momentum[1], 1),\n\t\t];\n\t\tsnakeCopy.unshift(newSnakeHead);\n\t\tif (checkCollision(newSnakeHead)) endGame();\n\t\tif (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n    console.log('head position is', newSnakeHead);\n    console.log('momentum is', momentum);\n\t};\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.clearRect(0, 0, mapSize[0], mapSize[1]);\n\t\tcontext.fillStyle = '#ff353a';\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\n\t\tcontext.fillStyle = '#00ff40';\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\t}, [snake, apple, gameOver]);\n\n\tuseInterval(() => gameOn(), snakeSpeed);\n\n\treturn (\n\t\t<div role=\"button\" tabIndex=\"-1\" onKeyDown={(event) => move(event.keyCode)}>\n\t\t\t<canvas\n\t\t\t\tstyle={{ border: '1px solid black' }}\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${mapSize[0]}px`}\n\t\t\t\theight={`${mapSize[1]}px`}\n\t\t\t/>\n\t\t\t{gameOver && <div>GAME OVER!</div>}\n\t\t\t<button className=\"startButton\" onClick={startGame}><span>Start Game </span></button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
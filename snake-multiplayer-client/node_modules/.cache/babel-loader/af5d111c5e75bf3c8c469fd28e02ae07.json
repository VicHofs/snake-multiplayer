{"ast":null,"code":"const mapSize = [800, 800];\nconst mapScale = 25;\nconst snakeSpawnPos = [[Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)]];\nsnakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => i === 1 ? pos + 1 : pos));\nlet apple = [Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)];\n\nwhile (!(apple in snakeSpawnPos)) {\n  apple = [Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)];\n}\n\nconst appleSpawnPos = apple;\nconst speed = 100;\nconst compass = {\n  38: [0, -1],\n  // up\n  40: [0, 1],\n  // down\n  37: [-1, 0],\n  // left\n  39: [1, 0],\n  // right\n  87: [0, -1],\n  // up\n  83: [0, 1],\n  // down\n  65: [-1, 0],\n  // left\n  68: [1, 0] // right\n\n};\nexport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass };","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/React/snake/src/initializer.js"],"names":["mapSize","mapScale","snakeSpawnPos","Math","floor","random","push","map","pos","i","apple","appleSpawnPos","speed","compass"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,CAAhB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,aAAa,GAAG,CACpB,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAAD,EAAsDE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAAtD,CADoB,CAAtB;AAGAC,aAAa,CAACI,IAAd,CAAmBJ,aAAa,CAAC,CAAD,CAAb,CAAiBK,GAAjB,CAAqB,CAACC,GAAD,EAAMC,CAAN,KAAYA,CAAC,KAAG,CAAJ,GAAOD,GAAG,GAAC,CAAX,GAAcA,GAA/C,CAAnB;AACA,IAAIE,KAAK,GAAG,CAACP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAAD,EAAsDE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAAtD,CAAZ;;AACA,OAAO,EAAES,KAAK,IAAIR,aAAX,CAAP,EAAkC;AAChCQ,EAAAA,KAAK,GAAG,CAACP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAAD,EAAsDE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAAtD,CAAR;AACD;;AACD,MAAMU,aAAa,GAAGD,KAAtB;AACA,MAAME,KAAK,GAAG,GAAd;AACA,MAAMC,OAAO,GAAG;AACd,MAAI,CAAC,CAAD,EAAI,CAAC,CAAL,CADU;AACD;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAFU;AAEF;AACZ,MAAI,CAAC,CAAC,CAAF,EAAK,CAAL,CAHU;AAGD;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAJU;AAIF;AACZ,MAAI,CAAC,CAAD,EAAI,CAAC,CAAL,CALU;AAKD;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CANU;AAMF;AACZ,MAAI,CAAC,CAAC,CAAF,EAAK,CAAL,CAPU;AAOD;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CARU,CAQH;;AARG,CAAhB;AAWA,SACEb,OADF,EAEEE,aAFF,EAGES,aAHF,EAIEV,QAJF,EAKEW,KALF,EAMEC,OANF","sourcesContent":["const mapSize = [800, 800];\nconst mapScale = 25;\nconst snakeSpawnPos = [\n  [Math.floor(Math.random() * (mapSize[0]) / mapScale), Math.floor(Math.random() * (mapSize[1]) / mapScale)]\n];\nsnakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => i===1? pos+1: pos))\nlet apple = [Math.floor(Math.random() * (mapSize[0]) / mapScale), Math.floor(Math.random() * (mapSize[1]) / mapScale)];\nwhile (!(apple in snakeSpawnPos)) {\n  apple = [Math.floor(Math.random() * (mapSize[0]) / mapScale), Math.floor(Math.random() * (mapSize[1]) / mapScale)];\n}\nconst appleSpawnPos = apple;\nconst speed = 100;\nconst compass = {\n  38: [0, -1], // up\n  40: [0, 1], // down\n  37: [-1, 0], // left\n  39: [1, 0], // right\n  87: [0, -1], // up\n  83: [0, 1], // down\n  65: [-1, 0], // left\n  68: [1, 0] // right\n};\n\nexport {\n  mapSize,\n  snakeSpawnPos,\n  appleSpawnPos,\n  mapScale,\n  speed,\n  compass\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\Desktop\\\\code\\\\React\\\\snake\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, snakeSpeed, compass } from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(snakeSpawnPos);\n  const [apple, setApple] = useState(appleSpawnPos);\n  const [momentum, setMomentum] = useState([0, -1]);\n  const [snakeSpeed, setSnakeSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const startGame = () => {};\n\n  const move = ({\n    key\n  }) => key in compass && setMomentum(compass[key]);\n\n  const endGame = () => {};\n\n  const spawnApple = () => {};\n\n  const checkCollision = () => {};\n\n  const gameOn = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + momentum[0], snakeCopy[0][1]];\n    snakeCopy.unshift(newSnakeHead);\n    snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n    context.clearRect(0, 0, mapSize[0], mapSize[1]);\n    context.fillStyle = 'lightgreen';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = 'lightblue';\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameOn(), snakeSpeed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: event => move(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${mapSize[0]}px`,\n    height: `${mapSize[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/React/snake/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","mapSize","snakeSpawnPos","appleSpawnPos","mapScale","snakeSpeed","compass","App","canvasRef","snake","setSnake","apple","setApple","momentum","setMomentum","setSnakeSpeed","gameOver","setGameOver","startGame","move","key","endGame","spawnApple","checkCollision","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","event","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport {\n\tmapSize,\n\tsnakeSpawnPos,\n\tappleSpawnPos,\n\tmapScale,\n\tsnakeSpeed,\n\tcompass,\n} from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n\tconst canvasRef = useRef();\n\tconst [snake, setSnake] = useState(snakeSpawnPos);\n\tconst [apple, setApple] = useState(appleSpawnPos);\n\tconst [momentum, setMomentum] = useState([0, -1]);\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tconst startGame = () => {};\n\n\tconst move = ({ key }) => key in compass && setMomentum(compass[key]);\n\n\tconst endGame = () => {};\n\n\tconst spawnApple = () => {};\n\n\tconst checkCollision = () => {};\n\n\tconst gameOn = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\n\t\tconst newSnakeHead = [snakeCopy[0][0] + momentum[0], snakeCopy[0][1]];\n\t\tsnakeCopy.unshift(newSnakeHead);\n\t\tsnakeCopy.pop();\n\t\tsetSnake(snakeCopy);\n\t};\n\n\tuseEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n\t\tcontext.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n\t\tcontext.clearRect(0, 0, mapSize[0], mapSize[1]);\n\t\tcontext.fillStyle = 'lightgreen';\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\t\tcontext.fillStyle = 'lightblue';\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  \n  useInterval(() => gameOn(), snakeSpeed)\n\n\treturn (\n\t\t<div role=\"button\" tabIndex=\"0\" onKeyDown={(event) => move(event)}>\n\t\t\t<canvas\n\t\t\t\tstyle={{ border: '1px solid black' }}\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${mapSize[0]}px`}\n\t\t\t\theight={`${mapSize[1]}px`}\n\t\t\t/>\n\t\t\t{gameOver && <div>GAME OVER!</div>}\n\t\t\t<button onClick={startGame}>Start Game</button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
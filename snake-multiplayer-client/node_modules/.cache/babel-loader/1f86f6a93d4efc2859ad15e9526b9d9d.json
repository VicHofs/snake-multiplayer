{"ast":null,"code":"const mapSize = [800, 800];\nconst mapScale = 25;\nconst snakeSpawnPos = [[Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)]];\nsnakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => i === 1 ? pos + 1 : pos));\nlet apple = [Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)];\n\nwhile (snakeSpawnPos.includes(apple)) apple = [Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)];\n\nconst appleSpawnPos = apple;\nconst speed = 100;\nconst compass = {\n  38: [0, -1],\n  // up arrow\n  40: [0, 1],\n  // down arrow\n  37: [-1, 0],\n  // left arrow\n  39: [1, 0],\n  // right arrow\n  87: [0, -1],\n  // up (W)\n  65: [-1, 0],\n  // left (A)\n  83: [0, 1],\n  // down (S)\n  68: [1, 0] // right (D)\n\n};\nexport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass };","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/Projects/snake-multiplayer/snake-multiplayer-client/src/pages/InGame/initializer.js"],"names":["mapSize","mapScale","snakeSpawnPos","Math","floor","random","push","map","pos","i","apple","includes","appleSpawnPos","speed","compass"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,CAAhB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,aAAa,GAAG,CACrB,CACCC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CADD,EAECE,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAFD,CADqB,CAAtB;AAMAC,aAAa,CAACI,IAAd,CAAmBJ,aAAa,CAAC,CAAD,CAAb,CAAiBK,GAAjB,CAAqB,CAACC,GAAD,EAAMC,CAAN,KAAaA,CAAC,KAAK,CAAN,GAAUD,GAAG,GAAG,CAAhB,GAAoBA,GAAtD,CAAnB;AACA,IAAIE,KAAK,GAAG,CACXP,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CADW,EAEXE,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAFW,CAAZ;;AAIA,OAAOC,aAAa,CAACS,QAAd,CAAuBD,KAAvB,CAAP,EACCA,KAAK,GAAG,CACPP,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CADO,EAEPE,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAAC,CAAD,CAAxB,GAA+BC,QAA1C,CAFO,CAAR;;AAID,MAAMW,aAAa,GAAGF,KAAtB;AACA,MAAMG,KAAK,GAAG,GAAd;AACA,MAAMC,OAAO,GAAG;AACf,MAAI,CAAC,CAAD,EAAI,CAAC,CAAL,CADW;AACF;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAFW;AAEH;AACZ,MAAI,CAAC,CAAC,CAAF,EAAK,CAAL,CAHW;AAGF;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAJW;AAIH;AACZ,MAAI,CAAC,CAAD,EAAI,CAAC,CAAL,CALW;AAKF;AACb,MAAI,CAAC,CAAC,CAAF,EAAK,CAAL,CANW;AAMF;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAPW;AAOH;AACZ,MAAI,CAAC,CAAD,EAAI,CAAJ,CARW,CAQH;;AARG,CAAhB;AAWA,SAASd,OAAT,EAAkBE,aAAlB,EAAiCU,aAAjC,EAAgDX,QAAhD,EAA0DY,KAA1D,EAAiEC,OAAjE","sourcesContent":["const mapSize = [800, 800];\nconst mapScale = 25;\nconst snakeSpawnPos = [\n\t[\n\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\n\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\n\t],\n];\nsnakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => (i === 1 ? pos + 1 : pos)));\nlet apple = [\n\tMath.floor((Math.random() * mapSize[0]) / mapScale),\n\tMath.floor((Math.random() * mapSize[1]) / mapScale),\n];\nwhile (snakeSpawnPos.includes(apple))\n\tapple = [\n\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\n\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\n\t];\nconst appleSpawnPos = apple;\nconst speed = 100;\nconst compass = {\n\t38: [0, -1], // up arrow\n\t40: [0, 1], // down arrow\n\t37: [-1, 0], // left arrow\n\t39: [1, 0], // right arrow\n\t87: [0, -1], // up (W)\n\t65: [-1, 0], // left (A)\n\t83: [0, 1], // down (S)\n\t68: [1, 0], // right (D)\n};\n\nexport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\Desktop\\\\code\\\\React\\\\snake\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, snakeSpeed, compass } from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(snakeSpawnPos);\n  const [apple, setApple] = useState(appleSpawnPos);\n  const [momentum, setMomentum] = useState([0, -1]);\n  const [snakeSpeed, setSnakeSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n  });\n\n  const startGame = () => {\n    setSnake(snakeSpawnPos);\n    setApple(appleSpawnPos);\n    setMomentum([0, -1]);\n    setSnakeSpeed(snakeSpeed);\n    setGameOver(false);\n  };\n\n  const move = keyCode => setMomentum(compass[keyCode]);\n\n  const endGame = () => {\n    setSnakeSpeed(null);\n    setGameOver(true);\n  };\n\n  const spawnApple = () => {};\n\n  const checkCollision = (head, snek = snake) => {\n    if (head[0] * mapScale >= mapSize[0] || head[0] < 0 || head[1] * mapScale >= mapSize[1] || head[1] < 0) {}\n  };\n\n  const gameOn = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + momentum[0], snakeCopy[0][1] + momentum[1]];\n    snakeCopy.unshift(newSnakeHead);\n    snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, mapSize[0], mapSize[1]);\n    context.fillStyle = 'lightgreen';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = 'lightblue';\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameOn(), snakeSpeed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"-1\",\n    onKeyDown: event => move(event.keyCode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${mapSize[0]}px`,\n    height: `${mapSize[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/React/snake/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","mapSize","snakeSpawnPos","appleSpawnPos","mapScale","snakeSpeed","compass","App","canvasRef","snake","setSnake","apple","setApple","momentum","setMomentum","setSnakeSpeed","gameOver","setGameOver","context","current","getContext","setTransform","startGame","move","keyCode","endGame","spawnApple","checkCollision","head","snek","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","clearRect","fillStyle","forEach","x","y","fillRect","event","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport {\n\tmapSize,\n\tsnakeSpawnPos,\n\tappleSpawnPos,\n\tmapScale,\n\tsnakeSpeed,\n\tcompass,\n} from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n\tconst canvasRef = useRef();\n\tconst [snake, setSnake] = useState(snakeSpawnPos);\n\tconst [apple, setApple] = useState(appleSpawnPos);\n\tconst [momentum, setMomentum] = useState([0, -1]);\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n\t});\n\n\tconst startGame = () => {\n    setSnake(snakeSpawnPos);\n    setApple(appleSpawnPos);\n    setMomentum([0, -1]);\n    setSnakeSpeed(snakeSpeed);\n    setGameOver(false);\n\n  };\n\n\tconst move = (keyCode) => setMomentum(compass[keyCode]);\n\n\tconst endGame = () => {\n    setSnakeSpeed(null);\n    setGameOver(true);\n  };\n\n\tconst spawnApple = () => {};\n\n\tconst checkCollision = (head, snek = snake) => {\n    if (head[0] * mapScale >= mapSize[0] || head[0] < 0 || head[1] * mapScale >= mapSize[1] || head[1] < 0) {\n\n    }\n  };\n\n\tconst gameOn = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\n\t\tconst newSnakeHead = [snakeCopy[0][0] + momentum[0], snakeCopy[0][1] + momentum[1]];\n\t\tsnakeCopy.unshift(newSnakeHead);\n\t\tsnakeCopy.pop();\n\t\tsetSnake(snakeCopy);\n\t};\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.clearRect(0, 0, mapSize[0], mapSize[1]);\n\t\tcontext.fillStyle = 'lightgreen';\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\t\tcontext.fillStyle = 'lightblue';\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  \n  useInterval(() => gameOn(), snakeSpeed)\n\n\treturn (\n\t\t<div role=\"button\" tabIndex=\"-1\" onKeyDown={(event) => move(event.keyCode)}>\n      <input/>\n\t\t\t<canvas\n\t\t\t\tstyle={{ border: '1px solid black' }}\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${mapSize[0]}px`}\n\t\t\t\theight={`${mapSize[1]}px`}\n\t\t\t/>\n\t\t\t{gameOver && <div>GAME OVER!</div>}\n\t\t\t<button onClick={startGame}>Start Game</button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
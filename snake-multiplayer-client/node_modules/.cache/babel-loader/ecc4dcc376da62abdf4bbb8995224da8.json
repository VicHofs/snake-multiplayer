{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\Desktop\\\\code\\\\React\\\\snake\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass } from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(snakeSpawnPos);\n  const [apple, setApple] = useState(appleSpawnPos);\n  const [momentum, setMomentum] = useState([0, -1]);\n  const [snakeSpeed, setSnakeSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n  });\n\n  const startGame = () => {\n    setSnake(snakeSpawnPos);\n    setApple(appleSpawnPos);\n    setMomentum([0, -1]);\n    setSnakeSpeed(speed);\n    setGameOver(false);\n  };\n\n  const move = keyCode => {\n    const newMomentum = compass[keyCode];\n    setMomentum();\n  };\n\n  const endGame = () => {\n    setSnakeSpeed(null);\n    setGameOver(true);\n  };\n\n  const wrapAdjust = (value, index) => {\n    if (value > mapSize[index] / mapScale) return 0;else if (value < 0) return mapSize[index] / mapScale;else return value;\n  };\n\n  const spawnApple = () => apple.map((_, i) => Math.floor(Math.random() * mapSize[i] / mapScale));\n\n  const checkCollision = (head, snek = snake) => {\n    for (const segment of snek) {\n      if (head[0] === segment[0] && head[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = snek => {\n    if (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n      let newApple = spawnApple();\n\n      while (checkCollision(newApple, snek)) spawnApple();\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameOn = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [wrapAdjust(snakeCopy[0][0] + momentum[0], 0), wrapAdjust(snakeCopy[0][1] + momentum[1], 1)];\n    console.log(newSnakeHead); // console.log(`alternative: [${newSnakeHead[0] % mapSize}, ${newSnakeHead[1]}]`)\n\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, mapSize[0], mapSize[1]);\n    context.fillStyle = '#ff353a';\n    context.fillRect(apple[0], apple[1], 1, 1);\n    context.fillStyle = '#00ff40';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameOn(), snakeSpeed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"-1\",\n    onKeyDown: event => move(event.keyCode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${mapSize[0]}px`,\n    height: `${mapSize[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/React/snake/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","mapSize","snakeSpawnPos","appleSpawnPos","mapScale","speed","compass","App","canvasRef","snake","setSnake","apple","setApple","momentum","setMomentum","snakeSpeed","setSnakeSpeed","gameOver","setGameOver","context","current","getContext","setTransform","startGame","move","keyCode","newMomentum","endGame","wrapAdjust","value","index","spawnApple","map","_","i","Math","floor","random","checkCollision","head","snek","segment","checkAppleCollision","newApple","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","console","log","unshift","pop","clearRect","fillStyle","fillRect","forEach","x","y","event","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport {\n\tmapSize,\n\tsnakeSpawnPos,\n\tappleSpawnPos,\n\tmapScale,\n\tspeed,\n\tcompass,\n} from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n\tconst canvasRef = useRef();\n\tconst [snake, setSnake] = useState(snakeSpawnPos);\n\tconst [apple, setApple] = useState(appleSpawnPos);\n\tconst [momentum, setMomentum] = useState([0, -1]);\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n\t});\n\n\tconst startGame = () => {\n\t\tsetSnake(snakeSpawnPos);\n\t\tsetApple(appleSpawnPos);\n\t\tsetMomentum([0, -1]);\n\t\tsetSnakeSpeed(speed);\n\t\tsetGameOver(false);\n\t};\n\n  const move = (keyCode) => {\n    const newMomentum = compass[keyCode]\n    setMomentum()\n  };\n\n\tconst endGame = () => {\n\t\tsetSnakeSpeed(null);\n\t\tsetGameOver(true);\n  };\n  \n  const wrapAdjust = (value, index) => {\n    if (value > (mapSize[index]/mapScale)) return 0;\n    else if (value < 0) return mapSize[index]/mapScale;\n    else return value;\n  }\n\n\tconst spawnApple = () => apple.map((_, i) => Math.floor(Math.random() * (mapSize[i]) / mapScale));\n\n\tconst checkCollision = (head, snek = snake) => {\n\t\tfor (const segment of snek) {\n      if (head[0] === segment[0] && head[1] === segment[1]) return true;\n    }\n      return false;\n  }\n\n  const checkAppleCollision = (snek) => {\n    if (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n      let newApple = spawnApple();\n      while (checkCollision(newApple, snek)) spawnApple();\n      setApple(newApple);\n      return true;\n    }\n    return false;\n  }\n\n\tconst gameOn = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\n\t\tconst newSnakeHead = [\n\t\t\twrapAdjust(snakeCopy[0][0] + momentum[0], 0),\n\t\t\twrapAdjust(snakeCopy[0][1] + momentum[1], 1),\n    ];\n    console.log(newSnakeHead);\n    // console.log(`alternative: [${newSnakeHead[0] % mapSize}, ${newSnakeHead[1]}]`)\n\t\tsnakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n\t\tsetSnake(snakeCopy);\n  };\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, mapSize[0], mapSize[1]);\n    context.fillStyle = '#ff353a';\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\n\t\tcontext.fillStyle = '#00ff40';\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\t}, [snake, apple, gameOver]);\n\n\tuseInterval(() => gameOn(), snakeSpeed);\n\n\treturn (\n\t\t<div role=\"button\" tabIndex=\"-1\" onKeyDown={(event) => move(event.keyCode)}>\n\t\t\t<canvas\n\t\t\t\tstyle={{ border: '1px solid black' }}\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${mapSize[0]}px`}\n\t\t\t\theight={`${mapSize[1]}px`}\n\t\t\t/>\n\t\t\t{gameOver && <div>GAME OVER!</div>}\n\t\t\t<button onClick={startGame}>Start Game</button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\Desktop\\\\code\\\\React\\\\snake\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass } from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(snakeSpawnPos);\n  const [apple, setApple] = useState(appleSpawnPos);\n  const [momentum, setMomentum] = useState([0, -1]);\n  const [snakeSpeed, setSnakeSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n  });\n\n  const startGame = () => {\n    setSnake(snakeSpawnPos);\n    setApple(appleSpawnPos);\n    setMomentum([0, -1]);\n    setSnakeSpeed(speed);\n    setGameOver(false);\n  };\n\n  const move = keyCode => {\n    if (keyCode in compass) {\n      const newMomentum = compass[keyCode];\n      if (newMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] && newMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]) setMomentum(newMomentum);\n    }\n  };\n\n  const endGame = () => {\n    setSnakeSpeed(null);\n    setGameOver(true);\n    alert('GAME OVER!');\n    snakeSpawnPos = [[Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)]];\n    snakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => i === 1 ? pos + 1 : pos));\n    let apple = [Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)];\n\n    while (apple in snakeSpawnPos) apple = [Math.floor(Math.random() * mapSize[0] / mapScale), Math.floor(Math.random() * mapSize[1] / mapScale)];\n\n    appleSpawnPos = apple;\n  };\n\n  const wrapAdjust = (value, index) => {\n    if (value >= mapSize[index] / mapScale) return 0;else if (value < 0) return mapSize[index] / mapScale - 1;else return value;\n  };\n\n  const spawnApple = () => apple.map((_, i) => Math.floor(Math.random() * mapSize[i] / mapScale));\n\n  const checkCollision = (head, snek = snake) => {\n    for (const segment of snek) {\n      if (head[0] === segment[0] && head[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = snek => {\n    if (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n      let newApple = spawnApple();\n\n      while (checkCollision(newApple, snek)) spawnApple();\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameOn = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [wrapAdjust(snakeCopy[0][0] + momentum[0], 0), wrapAdjust(snakeCopy[0][1] + momentum[1], 1)];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n    console.log('head position is', newSnakeHead);\n    console.log('momentum is', momentum);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, mapSize[0], mapSize[1]);\n    context.fillStyle = '#ff353a';\n    context.fillRect(apple[0], apple[1], 1, 1);\n    context.fillStyle = '#00ff40';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameOn(), snakeSpeed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"keyCap\",\n    role: \"button\",\n    tabIndex: \"-1\",\n    onKeyDown: event => move(event.keyCode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    className: \"map\",\n    ref: canvasRef,\n    width: `${mapSize[0]}px`,\n    height: `${mapSize[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: !snakeSpeed ? 'startButton' : 'restartButton',\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, !snakeSpeed ? 'Start Game ' : 'Restart Game ')));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/victo/Desktop/code/React/snake/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","mapSize","snakeSpawnPos","appleSpawnPos","mapScale","speed","compass","App","canvasRef","snake","setSnake","apple","setApple","momentum","setMomentum","snakeSpeed","setSnakeSpeed","gameOver","setGameOver","context","current","getContext","setTransform","startGame","move","keyCode","newMomentum","map","Math","abs","endGame","alert","floor","random","push","pos","i","wrapAdjust","value","index","spawnApple","_","checkCollision","head","snek","segment","checkAppleCollision","newApple","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","console","log","clearRect","fillStyle","fillRect","forEach","x","y","event"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useInterval } from './useInterval.js';\nimport {\n\tmapSize,\n\tsnakeSpawnPos,\n\tappleSpawnPos,\n\tmapScale,\n\tspeed,\n\tcompass,\n} from './initializer.js';\nimport './App.css';\n\nconst App = () => {\n\tconst canvasRef = useRef();\n\tconst [snake, setSnake] = useState(snakeSpawnPos);\n\tconst [apple, setApple] = useState(appleSpawnPos);\n\tconst [momentum, setMomentum] = useState([0, -1]);\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.setTransform(mapScale, 0, 0, mapScale, 0, 0);\n\t});\n\n\tconst startGame = () => {\n\t\tsetSnake(snakeSpawnPos);\n\t\tsetApple(appleSpawnPos);\n\t\tsetMomentum([0, -1]);\n\t\tsetSnakeSpeed(speed);\n\t\tsetGameOver(false);\n\t};\n\n\tconst move = (keyCode) => {\n\t\tif (keyCode in compass) {\n\t\t\tconst newMomentum = compass[keyCode];\n\t\t\tif (\n\t\t\t\tnewMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] &&\n\t\t\t\tnewMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]\n\t\t\t)\n\t\t\t\tsetMomentum(newMomentum);\n\t\t}\n\t};\n\n\tconst endGame = () => {\n\t\tsetSnakeSpeed(null);\n\t\tsetGameOver(true);\n\t\talert('GAME OVER!');\n\t\tsnakeSpawnPos = [\n\t\t\t[Math.floor(Math.random() * (mapSize[0]) / mapScale), Math.floor(Math.random() * (mapSize[1]) / mapScale)]\n\t\t  ];\n\t\tsnakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => i===1? pos+1: pos))\n\t\tlet apple = [Math.floor(Math.random() * (mapSize[0]) / mapScale), Math.floor(Math.random() * (mapSize[1]) / mapScale)];\n\t\twhile (apple in snakeSpawnPos) apple = [Math.floor(Math.random() * (mapSize[0]) / mapScale), Math.floor(Math.random() * (mapSize[1]) / mapScale)];\n\t\tappleSpawnPos = apple;\n\t};\n\n\tconst wrapAdjust = (value, index) => {\n\t\tif (value >= mapSize[index] / mapScale) return 0;\n\t\telse if (value < 0) return mapSize[index] / mapScale - 1;\n\t\telse return value;\n\t};\n\n\tconst spawnApple = () =>\n\t\tapple.map((_, i) => Math.floor((Math.random() * mapSize[i]) / mapScale));\n\n\tconst checkCollision = (head, snek = snake) => {\n\t\tfor (const segment of snek) {\n\t\t\tif (head[0] === segment[0] && head[1] === segment[1]) return true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst checkAppleCollision = (snek) => {\n\t\tif (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\n\t\t\tlet newApple = spawnApple();\n\t\t\twhile (checkCollision(newApple, snek)) spawnApple();\n\t\t\tsetApple(newApple);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst gameOn = () => {\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\n\t\tconst newSnakeHead = [\n\t\t\twrapAdjust(snakeCopy[0][0] + momentum[0], 0),\n\t\t\twrapAdjust(snakeCopy[0][1] + momentum[1], 1),\n\t\t];\n\t\tsnakeCopy.unshift(newSnakeHead);\n\t\tif (checkCollision(newSnakeHead)) endGame();\n\t\tif (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n\t\tsetSnake(snakeCopy);\n\t\tconsole.log('head position is', newSnakeHead);\n\t\tconsole.log('momentum is', momentum);\n\t};\n\n\tuseEffect(() => {\n\t\tconst context = canvasRef.current.getContext('2d');\n\t\tcontext.clearRect(0, 0, mapSize[0], mapSize[1]);\n\t\tcontext.fillStyle = '#ff353a';\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\n\t\tcontext.fillStyle = '#00ff40';\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n\t}, [snake, apple, gameOver]);\n\n\tuseInterval(() => gameOn(), snakeSpeed);\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"keyCap\"\n\t\t\trole=\"button\"\n\t\t\ttabIndex=\"-1\"\n\t\t\tonKeyDown={(event) => move(event.keyCode)}\n\t\t>\n\t\t\t<canvas\n\t\t\t\tclassName=\"map\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={`${mapSize[0]}px`}\n\t\t\t\theight={`${mapSize[1]}px`}\n\t\t\t/>\n\t\t\t{/* {gameOver && <div>GAME OVER!</div>} */}\n\t\t\t<button className={!snakeSpeed ? 'startButton' : 'restartButton'} onClick={startGame}>\n\t\t\t\t<span>{!snakeSpeed ? 'Start Game ' : 'Restart Game '}</span>\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}